<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/fr/_42/spring/controllers/FilmChatController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/fr/_42/spring/controllers/FilmChatController.java" />
              <option name="originalContent" value="package fr._42.spring.controllers;&#10;&#10;import fr._42.spring.models.ChatMessage;&#10;import fr._42.spring.models.User;&#10;import fr._42.spring.security.CustomUserDetails;&#10;import fr._42.spring.services.ChatMessagesService;&#10;import jakarta.servlet.http.Cookie;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataAccessException;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.messaging.handler.annotation.DestinationVariable;&#10;import org.springframework.messaging.handler.annotation.MessageMapping;&#10;import org.springframework.messaging.handler.annotation.SendTo;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.ui.Model;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Controller&#10;@RequestMapping(&quot;/films/&quot;)&#10;public class FilmChatController {&#10;    private static final Logger logger = LoggerFactory.getLogger(FilmChatController.class);&#10;    private final ChatMessagesService chatMessagesService;&#10;&#10;&#10;    @Autowired&#10;    public FilmChatController(ChatMessagesService chatMessagesService) {&#10;        this.chatMessagesService = chatMessagesService;&#10;    }&#10;&#10;    @GetMapping(value = {&quot;{filmId}/chat&quot;, &quot;{filmId}/chat/&quot;})&#10;    public String showChatPage(&#10;            @PathVariable(&quot;filmId&quot;) Long filmId,&#10;            @CookieValue(value = &quot;userId&quot;, defaultValue = &quot;&quot;) String userIp,&#10;            Model model,&#10;            HttpServletRequest request,&#10;            HttpServletResponse response,&#10;            Authentication authentication&#10;    ) {&#10;        if (authentication == null || !authentication.isAuthenticated()) {&#10;            return &quot;redirect:/signin&quot;;&#10;        }&#10;&#10;        User user = ((CustomUserDetails) authentication.getPrincipal()).getUser();&#10;        logger.info(&quot;Accessing chat page for film ID: {}&quot;, filmId);&#10;        logger.info(&quot;The current user: {}&quot;, user);&#10;        if (userIp.isEmpty()) {&#10;            userIp = request.getRemoteAddr();&#10;            response.addCookie(new Cookie(&quot;userId&quot;, userIp));&#10;        }&#10;&#10;        model.addAttribute(&quot;filmId&quot;, filmId);&#10;        model.addAttribute(&quot;currentUser&quot;, user);&#10;        model.addAttribute(&quot;currentUserId&quot;, user.getId());&#10;        model.addAttribute(&quot;currentUsername&quot;, user.getFirstName());&#10;&#10;        return &quot;users/filmChat&quot;;&#10;    }&#10;&#10;    @MessageMapping(&quot;/films/{filmId}/chat/send&quot;)&#10;    @SendTo(&quot;/topic/films/{filmId}/chat/messages&quot;)&#10;    public ChatMessage handleChatMessage(&#10;            @DestinationVariable(&quot;filmId&quot;) Long filmId,&#10;            ChatMessage message,&#10;            Authentication authentication&#10;    ) {&#10;        try {&#10;            if (authentication == null || !authentication.isAuthenticated()) {&#10;                logger.warn(&quot;Unauthenticated user tried to send message&quot;);&#10;                return createErrorMessage(&quot;Authentication required&quot;, filmId);&#10;            }&#10;            User user = ((CustomUserDetails) authentication.getPrincipal()).getUser();&#10;&#10;            message.setFilmId(filmId);&#10;            message.setSenderId(user.getId());&#10;&#10;            if (message.getTimestamp() == null)&#10;                message.setTimestamp(LocalDateTime.now());&#10;            message = chatMessagesService.addMessage(message);&#10;            return message;&#10;&#10;        } catch (IllegalArgumentException e) {&#10;            logger.error(&quot;Invalid message data: {}&quot;, e.getMessage());&#10;            return createErrorMessage(&quot;Invalid message data&quot;, filmId);&#10;        } catch (DataAccessException e) {&#10;            logger.error(&quot;Database error while saving chat message: {}&quot;, e.getMessage());&#10;            return createErrorMessage(&quot;Failed to save message&quot;, filmId);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Unexpected error handling chat message: {}&quot;, e.getMessage(), e);&#10;            return createErrorMessage(&quot;Internal server error&quot;, filmId);&#10;        }&#10;    }&#10;&#10;    private ChatMessage createErrorMessage(String errorText, Long filmId) {&#10;        ChatMessage errorMessage = new ChatMessage();&#10;        errorMessage.setFilmId(filmId);&#10;        errorMessage.setSenderId(-999L); // Special ID to identify system error messages&#10;        errorMessage.setContent(&quot;ERROR: &quot; + errorText);&#10;        errorMessage.setTimestamp(LocalDateTime.now());&#10;        return errorMessage;&#10;    }&#10;}" />
              <option name="updatedContent" value="package fr._42.spring.controllers;&#10;&#10;import fr._42.spring.models.ChatMessage;&#10;import fr._42.spring.models.User;&#10;import fr._42.spring.security.CustomUserDetails;&#10;import fr._42.spring.services.ChatMessagesService;&#10;import jakarta.servlet.http.Cookie;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.dao.DataAccessException;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.messaging.handler.annotation.DestinationVariable;&#10;import org.springframework.messaging.handler.annotation.MessageMapping;&#10;import org.springframework.messaging.handler.annotation.SendTo;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.ui.Model;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Controller&#10;@RequestMapping(&quot;/films/&quot;)&#10;public class FilmChatController {&#10;    private static final Logger logger = LoggerFactory.getLogger(FilmChatController.class);&#10;    private final ChatMessagesService chatMessagesService;&#10;&#10;&#10;    @Autowired&#10;    public FilmChatController(ChatMessagesService chatMessagesService) {&#10;        this.chatMessagesService = chatMessagesService;&#10;    }&#10;&#10;    @GetMapping(value = {&quot;{filmId}/chat&quot;, &quot;{filmId}/chat/&quot;})&#10;    public String showChatPage(&#10;            @PathVariable(&quot;filmId&quot;) Long filmId,&#10;            @CookieValue(value = &quot;userId&quot;, defaultValue = &quot;&quot;) String userIp,&#10;            Model model,&#10;            HttpServletRequest request,&#10;            HttpServletResponse response,&#10;            Authentication authentication&#10;    ) {&#10;        if (authentication == null || !authentication.isAuthenticated()) {&#10;            return &quot;redirect:/signin&quot;;&#10;        }&#10;&#10;        User user = ((CustomUserDetails) authentication.getPrincipal()).getUser();&#10;        logger.info(&quot;Accessing chat page for film ID: {}&quot;, filmId);&#10;        logger.info(&quot;The current user: {}&quot;, user);&#10;        if (userIp.isEmpty()) {&#10;            userIp = request.getRemoteAddr();&#10;            response.addCookie(new Cookie(&quot;userId&quot;, userIp));&#10;        }&#10;&#10;        model.addAttribute(&quot;filmId&quot;, filmId);&#10;        model.addAttribute(&quot;currentUser&quot;, user);&#10;        model.addAttribute(&quot;currentUserId&quot;, user.getId());&#10;        model.addAttribute(&quot;currentUsername&quot;, user.getFirstName());&#10;&#10;        return &quot;users/filmChat&quot;;&#10;    }&#10;&#10;    @MessageMapping(&quot;/films/{filmId}/chat/send&quot;)&#10;    @SendTo(&quot;/topic/films/{filmId}/chat/messages&quot;)&#10;    public ChatMessage handleChatMessage(&#10;            @DestinationVariable(&quot;filmId&quot;) Long filmId,&#10;            ChatMessage message,&#10;            Authentication authentication&#10;    ) {&#10;        try {&#10;            if (authentication == null || !authentication.isAuthenticated()) {&#10;                logger.warn(&quot;Unauthenticated user tried to send message&quot;);&#10;                return createErrorMessage(&quot;Authentication required&quot;, filmId);&#10;            }&#10;            User user = ((CustomUserDetails) authentication.getPrincipal()).getUser();&#10;&#10;            message.setFilmId(filmId);&#10;            message.setSenderId(user.getId());&#10;            message.setSenderFirstName(user.getFirstName()); // Add this line to set the sender's first name&#10;&#10;            if (message.getTimestamp() == null)&#10;                message.setTimestamp(LocalDateTime.now());&#10;            message = chatMessagesService.addMessage(message);&#10;            return message;&#10;&#10;        } catch (IllegalArgumentException e) {&#10;            logger.error(&quot;Invalid message data: {}&quot;, e.getMessage());&#10;            return createErrorMessage(&quot;Invalid message data&quot;, filmId);&#10;        } catch (DataAccessException e) {&#10;            logger.error(&quot;Database error while saving chat message: {}&quot;, e.getMessage());&#10;            return createErrorMessage(&quot;Failed to save message&quot;, filmId);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Unexpected error handling chat message: {}&quot;, e.getMessage(), e);&#10;            return createErrorMessage(&quot;Internal server error&quot;, filmId);&#10;        }&#10;    }&#10;&#10;    private ChatMessage createErrorMessage(String errorText, Long filmId) {&#10;        ChatMessage errorMessage = new ChatMessage();&#10;        errorMessage.setFilmId(filmId);&#10;        errorMessage.setSenderId(-999L); // Special ID to identify system error messages&#10;        errorMessage.setContent(&quot;ERROR: &quot; + errorText);&#10;        errorMessage.setTimestamp(LocalDateTime.now());&#10;        return errorMessage;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>